\title{Internals}{internals}

\use-plugin{concourse-docs}

\split-sections
\table-of-contents

\section{
  \title{Caching & Retention}

  TODO:

  \section{
    \title{Build Retention}{build-retention}
  }

  \section{
    \title{Resource Retention}{resource-retention}
  }

  \list{
    How it relates to garbage-collection
  }{
    How it relates to the schema
  }{
    Resource cache retention policy
  }{
    Container retention policy
  }
}

\section{
  \title{Database Schema}

  \section{
    \title{Pipeline/API Objects}

    The following tables manage objects exposed directly to users, either via
    the API or by configuring pipelines.

    \define-table{pipelines}{
      The \italic{pipelines} table contains details about a pipeline; its name,
      which team it belongs to, whether it is paused, and whether it is public.
    }

    \define-table{jobs}{
      The \italic{jobs} table tracks the details of all jobs in a Concourse
      deployment.  Jobs reference the \reference{pipelines-table}{pipeline}
      they belong to, their \reference{jobs}{Job} configuration, and their name
      in the pipeline.

      There are also a number of attributes which are used by the runtime:

      \inset{
        \define-attribute{paused: boolean}{
          The build scheduler does not schedule builds for jobs which are \code{paused}.
        }

        \define-attribute{inputs_determined: boolean}{
          The build scheduler does not schedule builds for jobs which have not
          yet had their \code{inputs_determined}.
        }

        \define-attribute{max_in_flight_reached: boolean}{
          The build scheduler does not schedule builds for jobs that have had
          their build \code{max_in_flight_reached}.
        }

        \define-attribute{interruptible: boolean}{
          Workers trying to \reference{worker-lifecycle}{land} will wait until
          all builds are finished, unless the build is for an
          \code{interruptible} job.
        }
      }
    }

    \define-table{builds}{
      The \italic{builds} table tracks the details of every run of every
      \reference{jobs-table}{job} or \reference{fly-execute}{one-off build},
      including its name, the status of the build, whether the build has been
      scheduled or completed, and information about the start and end times of
      the build.
    }

    \define-table{resources}{
      An entry in the \italic{resources} table represents a resource defined in
      a \reference{pipelines}{pipeline}. The \italic{resources} table has
      columns for configuration, name, type, and details about resource version
      checking.
    }

    \define-table{versioned_resources}{
      This table contains versions of \reference{resources-table}{resources}
      discovered by checking.  \italic{Versioned resources} have attributes
      describing their version, metadata, resource type, and whether the
      version is enabled in the pipeline.
    }

    \define-table{resource_types}{
      An entry in the \italic{resource types} table represents a custom
      resource type defined in a pipleine, and all of the information
      neccessary to pull the image bits for a custom resource type.  This
      includes the \italic{resource type} used to fetch the resource type's
      image (either a \reference{base_resource_types-table}{base_resource_type}
      or another custom resource) , the version of the image to fetch using
      that resource, and the configuration of the custom resource type.

      {- Maybe this should be called "custom resource types" and just point to
      a resource config? -}
    }
  }

  \section{
    \title{Abstract Objects}

    Concourse's database manages the abstractions around resources, resource
    configuration, resource versioning, and resource types. These tables help
    make the \reference{resources} concept operate as expected, scale across
    many pipelines, and to many different types.

    \define-table{resource_configs}{
      A \italic{resource config} is a distinct configuration of a resource
      type, not specific to any pipeline resource.

      A resource config is used for discovering versions. Unlike
      \reference{resources-table}{pipeline resources}, they have no name, and
      are identified entirely by their type and source. Resource configs are
      shared across pipelines and teams, since identical resource
      configurations can be reused.

      A resource config's \italic{type} is either a
      \reference{base_resource_types-table}{base resource type} or, in the case
      of a custom resource type, the \reference{resource_caches-table}{resource
      cache} of its custom type's image resource.
    }

    \define-table{resource_caches}{
      A \italic{resource cache} represents all information necessary to fetch a
      particular set of bits, i.e. the \italic{cache}.

      A resource cache always points to its \reference{resource_configs-table},
      and also specifies the \italic{version} and \italic{params}.

      Note that \reference{resource_configs-table} and
      \reference{resource_caches-table} both point to each other. This loop is
      closed by a resource config that points to a
      \reference{base_resource_types-table}{base resource type} at the end of
      the chain. This represents the case of a resource cache provided by a
      custom resource type, which in turn may be provided by \italic{another}
      custom resource type, and so on, until they reach a base type.
    }

    \define-table{resource_cache_uses}{
      A \italic{cache use} is a join table between a
      \reference{resource_caches-table}{resource cache} and a 'user', which
      lets us know when the use is no longer needed. Think of it as a reference
      counter.

      A use can be tied to a \reference{builds-table}, in which case the use
      can be removed when the build is finished. A cache is in use by a build
      when the build is fetching it as an input. This is to prevent the garbage
      collector from reaping caches that are no longer desired in the long run,
      but are still in use by a build.

      A use can be tied to a \reference{containers-table}, in which case the
      use can be removed when the container goes away. A cache is in use by a
      container when it's being used as the container's image, either via
      \reference{image_resource} or a \reference{resource-types}{resource
      type}.
    }

    \define-table{build_image_resource_caches}{
      A \italic{build image resource cache} is a join table between a
      \reference{builds-table}{build} and a
      \reference{resource_caches-table}{resource cache}.

      A build image resource cache is used for keeping caches that were used
      for an \reference{image_resource} in a build, as part of the
      \reference{resource-retention}{resource retention policy}.
    }

    \define-table{resource_config_check_sessions}{
      A \italic{resource config check session} is used for periodic resource
      checking of \reference{resources-table} and
      \reference{resource_types-table} by pointing to their
      \reference{resource_configs-table}{resource config}. There is only one
      check container per resource config, even if it's defined in many
      pipelines.

      A check session's expiry is tied to its worker's uptime, as a simple way
      to force balancing of check containers across workers more quickly after
      a deploy.
    }

    \define-table{worker_resource_config_check_sessions}{
      A \italic{worker resource config check session} is a join table tying a
      \reference{resource_config_check_sessions-table}{resource config check
      session} to a \reference{worker_base_resource_types-table}{worker base
      resource type}. When either go away, the worker resource config check
      session goes away. This is so that containers using an old base resource
      type are reaped and recreated.
    }

    \define-table{base_resource_types}{
      An entry in the \italic{base resource types} table represents a resource
      type which can be provided by any worker. It is used to keep
      \reference{resource_configs-table} as general as possible, and not tied
      to particular workers. This in turn allows
      \reference{resource_caches-table} to also be general, as is desired for
      Concourse's higher-level pipeline resource caching semantics.
    }

    \define-table{worker_base_resource_types}{
      An entry in the \italic{worker base resource type} table represents a
      location on a particular worker where the rootFS for a specific version
      of a \reference{base_resource_types-table}{base_resource_type} is found.
      When a worker registers, its \reference{base_resource_types-table} are
      synced by first removing old versions and then inserting new ones.
    }

    \define-table{worker_resource_caches}{
      A \italic{worker resource cache} is a join between a
      \reference{resource_caches-table}{resource cache} and a
      \reference{worker_base_resource_types-table}{worker base resource type}.

      A worker resource cache is automatically removed when its worker base
      resource type or resource cache is removed. This is used to automatically
      invalidate any caches that were fetched with an old version of a base
      resource type.
    }
  }

  \section{
    \title{Runtime}

    \define-table{containers}{
      The \italic{containers} table represents the set of all containers across
      all the workers, and keeps track of their state such that no container is
      ever left behind on a worker.

      Containers have a handful of really important attributes:

      \inset{
        \define-attribute{handle: string}{
          The unique identifier of the container in Garden.
        }{containers-handle}

        \define-attribute{worker_name: string}{
          The name of the worker where the container is located.
        }{containers-worker_name}

        \define-attribute{state: \code{CREATING}, \code{CREATED}, or \code{DESTROYING}}{
          The stage in the lifecycle of the container. See
          \reference{container-lifecycle}
        }{containers-state}

        Containers can be one of four types, each with individual references
        to their relating object.

        \define-attribute{image_check_container_id: fkey}{
          This signifies that the container is dependant on another container
          which is busy checking for the image this container will be based on.
          This is used in the case of custom resource types, or tasks with
          image_resource.  This container will be in the \code{CREATING}
          \reference{containers-state}{state} until the image is fetched later.
        }{containers-image_check_container_id}

        \define-attribute{image_get_container_id: fkey}{
          This signifies that the container is dependant on another container which
          is busy downloading the bits for the image this container will be
          based on. This is used in the case of custom resource types, or
          tasks with image_resource. This container will be in the
          \code{CREATING} \reference{containers-state}{state} until the image
          is fetched.
        }{containers-image_get_container_id}

        \define-attribute{build_id: fkey}{
          If this container is for a build step, this column refers to the
          \reference-column{builds}{id} this container is related to.
        }{containers-build_id}

        \define-attribute{worker_resource_config_check_session_id: fkey}{
          If this container is for running the check script for a resource, this column
          refers to a \reference-column{worker_resource_config_check_sessions}{id}.
        }{containers-resource_id}
      }
    }

    \define-table{volumes}{
      The \italic{volumes} table represents the set of all volumes across all
      the workers, and keeps track of their state such that no volume is ever
      left behind on a worker.

      Volumes have a handful of really important attributes.

      \inset{
        \define-attribute{handle: string}{
          The unique identifier of the volume in BaggageClaim.
        }{volumes-handle}

        \define-attribute{worker_name: string}{
          The name of the worker where the volume located.
        }{volumes-worker_name}

        \define-attribute{state: \code{CREATING}, \code{CREATED}, or \code{DESTROYING}}{
          The stage in the lifecycle of the volume. See
          \reference{volume-internals}.
        }{volumes-state}

        \define-attribute{container_id: fkey}{
          The container this volume is associated with.
        }{volumes-container_id}

        \define-attribute{worker_base_resource_type_id: fkey}{
          If this volume is used for a \reference{worker_base_resource_types-table}{worker base resource type}
          this column points to it.
        }{volumes-worker_base_resource_type_id}

        \define-attribute{worker_resource_cache_id: fkey}{
          If this volume is for a \reference{worker_resource_caches-table}{worker resource cache}
          this column points to it.
        }{volumes-worker_resource_cache_id}

        \define-attribute{worker_task_cache_id: fkey}{
          If this volume is for a \reference{worker_task_caches-table}{worker task cache}
          this column points to it.
        }{volumes-worker_task_cache_id}
      }
    }

    \define-table{workers}{
      The \italic{workers} table represents all of the workers that have registered
      with the Concourse cluster.

      \inset{
        \define-attribute{name: string}{
          The unique name for the worker used to identify it in the cluster.
        }{worker-table-name}

        \define-attribute{addr: string}{
          The full address of the Garden server running for the worker.
        }{worker-table-addr}

        \define-attribute{state: RUNNING, STALLED, LANDING, LANDED, RETIRING}{
          The current state of the worker. This keeps track of the worker's
          lifecycle in order to handle the lifecycle of workers and their
          ability to have new containers or volumes created on them.
        }{worker-table-state}

        \define-attribute{baggageclaim_url: string}{
          The full address of the worker's baggageclaim server; used to store volumes
          on the worker.
        }{worker-table-baggageclaim-url}
      }
    }

    \define-table{worker_task_caches}{
      The \italic{worker task caches} table tracks all of the details of a
      \reference{caches}{task cache} for a specific worker. \italic{Worker task
      caches} are created for any \reference{task-step} in a job for all of the
      paths specified \reference{caches}{task cache}.

      This table is used to identify worker task cache volumes by their
      \reference{volumes-worker_task_cache_id}{id}.
    }
  }
}

\section{
  \title{Garbage Collection}

  One key difference between Concourse and other CI systems is that everything
  runs in isolated environments. Where some CI systems may just run builds one
  at a time on a single VM and reusing a working directory, Concourse creates
  fresh \reference{container-internals} and \reference{volume-internals} to
  ensure things can safely run in a repeatable environment, isolated from other
  workloads running on the same worker.

  This introduces a new problem of knowing when Concourse should remove these
  containers and volumes. Safely identifying things for removal and then
  getting rid of them, releasing their resources, is the process of
  \italic{garbage collection}.

  \section{
    \title{Goals}

    Let's define our metrics for success:

    \list{
      \bold{Safe}. There should never be a case where a build is running and
      a container or volume is removed out from under it, causing the build to
      fail. Resource checking should also never result in errors from check
      containers being removed. No one should even know garbage collection is
      happening.
    }{
      \bold{Airtight}. Everything Concourse creates, whether it's a
      \reference{container-internals}{container} or
      \reference{volume-internals}{volume} on a worker or an entry in the
      database, should never leak. Each object should have a fully defined
      lifecycle such that there is a clear end to its use.  The ATC should be
      interruptible at any point in time and at the very least be able to
      remove any state it had created beforehand.
    }{
      \bold{Resilient}. Garbage collection should never be outpaced by the
      workload. A single misbehaving worker should not prevent garbage
      collection from being performed on other workers. A slow delete of a
      volume should not prevent garbage collecting of other things on the same
      worker.
    }
  }

  \section{
    \title{How it Works}

    The garbage collector is a batch operation that runs every 30 seconds. This
    number was chosen arbitrarily and may be reduced in the future. It's
    important to note that the collector must be able to run frequently enough
    to not be outpaced by the workload producing things, and so the batch
    operation should be able to complete pretty quickly.

    The batch operation first performs garbage collection within the database
    alone, removing rows that are no longer needed. The removal of rows from
    one stage will often result in removals in a later stage.  They are run in
    the following order:

    \list{
      \reference{builds-table} that no longer meet the
      \reference{build-retention} criteria are marked non-interceptible
    }{
      \reference{workers-table} are stepped through their state machine.
      Unresponsive workers become \code{STALLED}, workers that are
      \code{RETIRING} are deleted once drained, and workers that are
      \code{LANDING} become \code{LANDED} once drained.
    }{
      \reference{build_image_resource_caches-table} are removed for builds that
      finished over 24 hours ago.
    }{
      \reference{resource_cache_uses-table} are removed for builds that are no
      longer interceptible.
    }{
      \reference{resource_configs-table} that are no longer referenced by a
      \reference-column{resource_caches}{resource_config_id} or a
      \reference-column{resource_config_check_sessions}{resource_config_id} are
      removed.
    }{
      \reference{resource_caches-table} that are no longer referenced by a
      \reference-column{resource_configs}{resource_cache_id} or a
      \reference-column{resource_cache_uses}{resource_cache_id} are removed.
    }{
      \reference{resource_config_check_sessions-table} that have exceeded their
      \reference-column{resource_config_check_sessions}{expires_at} are
      removed.
    }

    If any of the above operations fail, the garbage collector will just log an
    error and move on. This is so that failure to collect one class of objects
    does not prevent everything else from being garbage collected. Failure at
    any part of the garbage collection is OK; it can just retry on the next
    pass.

    After the initial pass of garbage collection in the database, there should
    now be a set of \reference{volumes-table} and \reference{containers-table}
    that meet criteria for garbage collection. These two are a bit more
    complicated to garbage-collect; they both require talking to a worker, and
    waiting on a potentially slow delete.

    Containers and volumes are the costliest resources consumed by Concourse.
    There are also many of them created over time as builds execute and
    pipelines perform their \reference{pipeline-resources}{resource checking}.
    Therefore it is important to parallelize this aspect of garbage collection
    so that one slow delete or one slow worker does not cause them to pile up.

    So, the next two steps are \reference{container-collection} and
    \reference{volume-collection}.

    \section{
      \title{Container Collection}

      First, a fairly simple query is executed to find containers that meet one
      of the following conditions:

      \list{
        If it has a \code{NULL} reference for all four dependent columns:

        \list{
          \reference-column{containers}{build_id}
        }{
          \reference-column{containers}{image_check_container_id}
        }{
          \reference-column{containers}{image_get_container_id}
        }{
          \reference-column{containers}{worker_resource_config_check_session_id}
        }

        This is the simplest case: the things that needed the container are now
        gone, so it can go away.
      }{
        The \reference-column{containers}{build_id} referenced by the container
        is no longer interceptible. See \reference{build-retention}.
      }{
        The \reference-column{containers}{image_check_container_id} or
        \reference-column{containers}{image_get_container_id} referenced by the
        container is no longer in \code{CREATING} state (likely
        \code{CREATED}).
      }

      Once these containers are found, they are all deleted in parallel, with a
      max-in-flight limit per worker so that the worker doesn't get hammered by
      a burst of writes.

      The deletion of every container is a careful process to ensure they never
      leak and are never deleted while a user is hijacked into them:

      \list{
        If the container is \code{CREATING}, we mark it \code{CREATED}. This is
        a bit wonky but makes it easier to just step it through the rest of the
        lifecycle, since if there was a container being created on the worker,
        we need to clean it up.
      }{
        If the container is \code{CREATED}, we first check to see if it was
        hijacked. If not, we transition it to \code{DESTROYING}.

        If the container is hijacked, we try to find the container in the
        worker.

        If the worker container is found, we set a \italic{grace time} on it (a
        period of inactivity after which the container will be reaped by the
        worker itself), mark the database container as \italic{discontinued},
        and transition the container to \code{DESTROYING}.

        If the worker container is not found, we transition the container to
        \code{DESTROYING}, just to funnel it down the same code path as below.
      }{
        If the container is \code{DESTROYING}, and the container is
        \italic{discontinued}, we check if the container has expired yet (via
        the grace time) by looking for it on the worker. If it's still there,
        we leave it alone, and leave the container in the database. If it's
        gone, we reap the container from the database.

        If the container is not discontinued, we destroy the container on the worker
        and reap the container from the database.
      }

      Note that if any point of the above process \italic{fails}, the container
      is left in its current state in the database. A container is only ever
      removed from the database when it's guaranteed that everything has been
      cleaned up.
    }

    \section{
      \title{Volume Collection}

      Volume collection is quite a bit simpler than
      \reference{container-collection}.

      First, volumes are found for deletion. This is just a query for volumes
      that have \code{NULL} references for all four volume owners:

      \list{
        \reference-column{volumes}{worker_resource_cache_id}
      }{
        \reference-column{volumes}{worker_base_resource_type_id}
      }{
        \reference-column{volumes}{worker_resource_cache_id}
      }{
        \reference-column{volumes}{worker_resource_cache_id}
      }

      Next, each \code{CREATED} volume is transitioned to \code{DESTROYING}.
      This transition can fail if the volume is being used as the parent of a
      copy-on-write volume that is still in use (e.g. by a build).

      Then, for each volume for \code{DESTROYING} state, including those that
      were just transitioned, we execute the following in parallel (as with
      containers, there is a max-in-flight limit per worker):

      \list{
        First, look up the volume on the worker and destroy it if it's found.
      }{
        Next, delete the volume from the database.
      }

      As with containers, if any part of the deletion sequence returns an
      error, the volume is skipped. A volume is only ever removed from the
      database when it's guaranteed that everything has been cleaned up.
    }
  }
}

\section{
  \title{Volumes}{volume-internals}

  \section{
    \title{Lifecycle}{volume-lifecycle}

    Volumes can be in one of 3 states; \code{CREATING}, \code{CREATED},
    \code{DESTROYING}.

    \code{CREATING}, volumes are still being initialized in BaggageClaim and
    are not yet ready to be used. \code{CREATING}, volumes can only transition
    to \code{CREATED}.

    \code{CREATED} volumes are initialized in BaggageClaim and are ready to be
    used. \code{CREATED} volumes can only be transitioned to \code{DESTROYING}.

    \code{DESTROYING} volumes are marked for removal from BaggageClaim, and
    should no longer be used; they will be removed from the database when they
    no longer exist in the BaggageClaim server.
  }

  \section{
    \title{Types of Volumes}
  }
}

\section{
  \title{Containers}{container-internals}

  \section{
    \title{Lifecycle}{container-lifecycle}

    Containers can be in one of 3 states; \code{CREATING}, \code{CREATED},
    \code{DESTROYING}.

    \code{CREATING} containers are still being initialized on the worker and
    are not yet ready to be used. \code{CREATING}, containers can only
    transition to \code{CREATED}.

    \code{CREATED} containers are initialized on the worker and are ready to be
    used. A \code{CREATED} container can only be transitioned to
    \code{DESTROYING}.

    \code{DESTROYING} containers are marked for removal on the worker, and
    should no longer be used; they will be removed from the database when they
    no longer exist on the worker.
  }


  \section{
    \title{Types of Containers}

    These are the types of containers:

    \section{
      \title{Task Containers}

      \italic{Task containers} are created when a \reference{task-step} is
      executed in a build plan. They are based on the image produced by the
      configured \reference{image_resource} or \reference{task-step-image}.
    }

    \section{
      \title{Resource Check Container}

      \italic{Resource Check Containers} are created from the resource type's
      image and are used to check for new versions of a resource.  There will
      be one per \reference{resource_configs-table}{resource config}.
    }

    \section{
      \title{Resource Get Container}

      \italic{Resource Get Container} are created when a \reference{get-step}
      is executed in a build plan. They are based on the resource type's image
      and are used to download the bits for a given version of resource.

      There will be one per \reference{resource_configs-table}{resource
      config}.
    }
  }


  \section{
    \title{Container Placement Strategies}{container-placement-strategies}
    As explained above, each step of a build plan is executed inside a container. ATC will distribute containers across the worker cluster depending on the configured strategy. \bold{Default:} \code{volume-locality}

    \define-table{volume-locality}{
       When using \code{volume-locality}, the ATC places \code{get}, \code{put} and \code{task} containers on workers where a majority of their inputs (required resources) are present. This alleviates the need to stream resources cached on other workers to the chosen worker. This is advantageous for workloads that are invoked often. e.g. builds invoked by a short time-resource interval.
     }

     \define-table{random}{
       With the \code{random} strategy, the ATC places \code{get}, \code{put} and \code{task} containers on any worker, ignoring any affinity.
      }

     \define-table{least-build-containers}{
       If using the \code{least-build-containers} strategy, the ATC places \code{get}, \code{put} and \code{task} containers on a worker which has the least containers. This ensures build containers are distributed equally across workers.
     }

     Refer to \reference{configuring-placement-strategies} for information on how to specify a particular strategy.
  }
}

\section{
  \title{Workers}{worker-internals}

  \section{
    \title{Lifecycle}{worker-lifecycle}

    \define-table{RUNNING}{
      A worker in this state is registered with the cluster and ready to start
      running containers and storing volumes.
    }

    \define-table{STALLED}{
      A worker in this state was previously registered with the cluster, but
      stopped advertising itself for some reason.  Ususally this is due to
      network connectivity issues, or the worker stopping unexpectedly.

      If the worker remains in this state and cannot be recovered, it can be
      removed using the \reference{fly-prune-worker} command.
    }

    \define-table{LANDING}{
      The \code{concourse land-worker} command will put a worker in the LANDING
      state to safely drain its assignments for temporary downtime.

      The ATC will wait for builds on the worker for \reference{jobs-table}
      which aren't interruptible to finish, and transition the worker into
      \reference{LANDED-table} state.
    }

    \define-table{LANDED}{
      A worker in this state has successfully waited for all non-interruptible
      \reference{jobs-table} on it after having \code{concourse land-worker}
      called. It will no longer be used to schedule any new containers or
      create volumes until it registers as \reference{RUNNING-table} again.
    }

    \define-table{RETIRING}{
      The \code{concourse retire-worker} command will put a worker in the
      RETIRING state to remove it from the cluster permanently.

      The ATC will wait for builds on the worker for \reference{jobs-table}
      which aren't interruptible to finish, and remove the worker.
    }
  }
}
